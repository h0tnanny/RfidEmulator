// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RfidEmulator.Repository;

#nullable disable

namespace RfidEmulator.Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240324165314_AddCountTags")]
    partial class AddCountTags
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RfidEmulator.Domain.Entity.Antenna", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Power")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ReaderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ReaderId");

                    b.ToTable("Antennas", "equipment");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReaderConfigId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ReaderConfigId")
                        .IsUnique();

                    b.ToTable("Readers", "equipment");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.ReaderConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountsPerSecTimeMax")
                        .HasColumnType("integer");

                    b.Property<int>("CountsPerSecTimeMin")
                        .HasColumnType("integer");

                    b.Property<int>("Tags")
                        .HasColumnType("integer");

                    b.Property<int>("UpperRssiLevelMax")
                        .HasColumnType("integer");

                    b.Property<int>("UpperRssiLevelMin")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ReaderConfigs", "equipment");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.Antenna", b =>
                {
                    b.HasOne("RfidEmulator.Domain.Entity.Reader", null)
                        .WithMany("Antennas")
                        .HasForeignKey("ReaderId");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.Reader", b =>
                {
                    b.HasOne("RfidEmulator.Domain.Entity.ReaderConfig", "Config")
                        .WithOne("Reader")
                        .HasForeignKey("RfidEmulator.Domain.Entity.Reader", "ReaderConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.Reader", b =>
                {
                    b.Navigation("Antennas");
                });

            modelBuilder.Entity("RfidEmulator.Domain.Entity.ReaderConfig", b =>
                {
                    b.Navigation("Reader")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
